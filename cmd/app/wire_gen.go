// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/fpnl/go-sample/biz"
	"github.com/fpnl/go-sample/conf"
	"github.com/fpnl/go-sample/data"
	"github.com/fpnl/go-sample/server"
	"github.com/fpnl/go-sample/server/middleware"
	"github.com/fpnl/go-sample/service"
	"log/slog"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(project *conf.Project, confServer *conf.Server, confData *conf.Data, logger *slog.Logger) (*app, func(), error) {
	db, err := data.NewGORM(confData)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(db, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeter := service.NewGreeterService(greeterUsecase, logger)
	defaultCodec := middleware.NewDefaultCodec()
	ipWhitelist := middleware.NewIpWhitelist()
	requestUUID := middleware.NewRequestUUID(logger)
	accessLog, cleanup2, err := middleware.NewAccessLog(logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	httpServer := server.NewHTTPServer(project, confServer, greeter, defaultCodec, ipWhitelist, requestUUID, accessLog)
	mainApp := newApp(httpServer)
	return mainApp, func() {
		cleanup2()
		cleanup()
	}, nil
}
